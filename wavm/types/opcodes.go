package types

// Opcodes
const (
	OpcodeUnreachable       = 0x00 // unreachable
	OpcodeNop               = 0x01 // nop
	OpcodeBlock             = 0x02 // block rt in* end
	OpcodeLoop              = 0x03 // loop rt in* end
	OpcodeIf                = 0x04 // if rt in* else in* end
	OpcodeElse              = 0x05 // else
	OpcodeEnd               = 0x0B // end
	OpcodeBr                = 0x0C // br l
	OpcodeBrIf              = 0x0D // br_if l
	OpcodeBrTable           = 0x0E // br_table l* lN
	OpcodeReturn            = 0x0F // return
	OpcodeCall              = 0x10 // call x
	OpcodeCallIndirect      = 0x11 // call_indirect x
	OpcodeDrop              = 0x1A // drop
	OpcodeSelect            = 0x1B // select
	OpcodeLocalGet          = 0x20 // local.get x
	OpcodeLocalSet          = 0x21 // local.set x
	OpcodeLocalTee          = 0x22 // local.tee x
	OpcodeGlobalGet         = 0x23 // global.get x
	OpcodeGlobalSet         = 0x24 // global.set x
	OpcodeI32Load           = 0x28 // i32.load m
	OpcodeI64Load           = 0x29 // i64.load m
	OpcodeF32Load           = 0x2A // f32.load m
	OpcodeF64Load           = 0x2B // f64.load m
	OpcodeI32Load8S         = 0x2C // i32.load8_s m
	OpcodeI32Load8U         = 0x2D // i32.load8_u m
	OpcodeI32Load16S        = 0x2E // i32.load16_s m
	OpcodeI32Load16U        = 0x2F // i32.load16_u m
	OpcodeI64Load8S         = 0x30 // i64.load8_s m
	OpcodeI64Load8U         = 0x31 // i64.load8_u m
	OpcodeI64Load16S        = 0x32 // i64.load16_s m
	OpcodeI64Load16U        = 0x33 // i64.load16_u m
	OpcodeI64Load32S        = 0x34 // i64.load32_s m
	OpcodeI64Load32U        = 0x35 // i64.load32_u m
	OpcodeI32Store          = 0x36 // i32.store m
	OpcodeI64Store          = 0x37 // i64.store m
	OpcodeF32Store          = 0x38 // f32.store m
	OpcodeF64Store          = 0x39 // f64.store m
	OpcodeI32Store8         = 0x3A // i32.store8 m
	OpcodeI32Store16        = 0x3B // i32.store16 m
	OpcodeI64Store8         = 0x3C // i64.store8 m
	OpcodeI64Store16        = 0x3D // i64.store16 m
	OpcodeI64Store32        = 0x3E // i64.store32 m
	OpcodeMemorySize        = 0x3F // memory.size
	OpcodeMemoryGrow        = 0x40 // memory.grow
	OpcodeI32Const          = 0x41 // i32.const n
	OpcodeI64Const          = 0x42 // i64.const n
	OpcodeF32Const          = 0x43 // f32.const z
	OpcodeF64Const          = 0x44 // f64.const z
	OpcodeI32Eqz            = 0x45 // i32.eqz
	OpcodeI32Eq             = 0x46 // i32.eq
	OpcodeI32Ne             = 0x47 // i32.ne
	OpcodeI32LtS            = 0x48 // i32.lt_s
	OpcodeI32LtU            = 0x49 // i32.lt_u
	OpcodeI32GtS            = 0x4A // i32.gt_s
	OpcodeI32GtU            = 0x4B // i32.gt_u
	OpcodeI32LeS            = 0x4C // i32.le_s
	OpcodeI32LeU            = 0x4D // i32.le_u
	OpcodeI32GeS            = 0x4E // i32.ge_s
	OpcodeI32GeU            = 0x4F // i32.ge_u
	OpcodeI64Eqz            = 0x50 // i64.eqz
	OpcodeI64Eq             = 0x51 // i64.eq
	OpcodeI64Ne             = 0x52 // i64.ne
	OpcodeI64LtS            = 0x53 // i64.lt_s
	OpcodeI64LtU            = 0x54 // i64.lt_u
	OpcodeI64GtS            = 0x55 // i64.gt_s
	OpcodeI64GtU            = 0x56 // i64.gt_u
	OpcodeI64LeS            = 0x57 // i64.le_s
	OpcodeI64LeU            = 0x58 // i64.le_u
	OpcodeI64GeS            = 0x59 // i64.ge_s
	OpcodeI64GeU            = 0x5A // i64.ge_u
	OpcodeF32Eq             = 0x5B // f32.eq
	OpcodeF32Ne             = 0x5C // f32.ne
	OpcodeF32Lt             = 0x5D // f32.lt
	OpcodeF32Gt             = 0x5E // f32.gt
	OpcodeF32Le             = 0x5F // f32.le
	OpcodeF32Ge             = 0x60 // f32.ge
	OpcodeF64Eq             = 0x61 // f64.eq
	OpcodeF64Ne             = 0x62 // f64.ne
	OpcodeF64Lt             = 0x63 // f64.lt
	OpcodeF64Gt             = 0x64 // f64.gt
	OpcodeF64Le             = 0x65 // f64.le
	OpcodeF64Ge             = 0x66 // f64.ge
	OpcodeI32Clz            = 0x67 // i32.clz
	OpcodeI32Ctz            = 0x68 // i32.ctz
	OpcodeI32PopCnt         = 0x69 // i32.popcnt
	OpcodeI32Add            = 0x6A // i32.add
	OpcodeI32Sub            = 0x6B // i32.sub
	OpcodeI32Mul            = 0x6C // i32.mul
	OpcodeI32DivS           = 0x6D // i32.div_s
	OpcodeI32DivU           = 0x6E // i32.div_u
	OpcodeI32RemS           = 0x6F // i32.rem_s
	OpcodeI32RemU           = 0x70 // i32.rem_u
	OpcodeI32And            = 0x71 // i32.and
	OpcodeI32Or             = 0x72 // i32.or
	OpcodeI32Xor            = 0x73 // i32.xor
	OpcodeI32Shl            = 0x74 // i32.shl
	OpcodeI32ShrS           = 0x75 // i32.shr_s
	OpcodeI32ShrU           = 0x76 // i32.shr_u
	OpcodeI32Rotl           = 0x77 // i32.rotl
	OpcodeI32Rotr           = 0x78 // i32.rotr
	OpcodeI64Clz            = 0x79 // i64.clz
	OpcodeI64Ctz            = 0x7A // i64.ctz
	OpcodeI64PopCnt         = 0x7B // i64.popcnt
	OpcodeI64Add            = 0x7C // i64.add
	OpcodeI64Sub            = 0x7D // i64.sub
	OpcodeI64Mul            = 0x7E // i64.mul
	OpcodeI64DivS           = 0x7F // i64.div_s
	OpcodeI64DivU           = 0x80 // i64.div_u
	OpcodeI64RemS           = 0x81 // i64.rem_s
	OpcodeI64RemU           = 0x82 // i64.rem_u
	OpcodeI64And            = 0x83 // i64.and
	OpcodeI64Or             = 0x84 // i64.or
	OpcodeI64Xor            = 0x85 // i64.xor
	OpcodeI64Shl            = 0x86 // i64.shl
	OpcodeI64ShrS           = 0x87 // i64.shr_s
	OpcodeI64ShrU           = 0x88 // i64.shr_u
	OpcodeI64Rotl           = 0x89 // i64.rotl
	OpcodeI64Rotr           = 0x8A // i64.rotr
	OpcodeF32Abs            = 0x8B // f32.abs
	OpcodeF32Neg            = 0x8C // f32.neg
	OpcodeF32Ceil           = 0x8D // f32.ceil
	OpcodeF32Floor          = 0x8E // f32.floor
	OpcodeF32Trunc          = 0x8F // f32.trunc
	OpcodeF32Nearest        = 0x90 // f32.nearest
	OpcodeF32Sqrt           = 0x91 // f32.sqrt
	OpcodeF32Add            = 0x92 // f32.add
	OpcodeF32Sub            = 0x93 // f32.sub
	OpcodeF32Mul            = 0x94 // f32.mul
	OpcodeF32Div            = 0x95 // f32.div
	OpcodeF32Min            = 0x96 // f32.min
	OpcodeF32Max            = 0x97 // f32.max
	OpcodeF32CopySign       = 0x98 // f32.copysign
	OpcodeF64Abs            = 0x99 // f64.abs
	OpcodeF64Neg            = 0x9A // f64.neg
	OpcodeF64Ceil           = 0x9B // f64.ceil
	OpcodeF64Floor          = 0x9C // f64.floor
	OpcodeF64Trunc          = 0x9D // f64.trunc
	OpcodeF64Nearest        = 0x9E // f64.nearest
	OpcodeF64Sqrt           = 0x9F // f64.sqrt
	OpcodeF64Add            = 0xA0 // f64.add
	OpcodeF64Sub            = 0xA1 // f64.sub
	OpcodeF64Mul            = 0xA2 // f64.mul
	OpcodeF64Div            = 0xA3 // f64.div
	OpcodeF64Min            = 0xA4 // f64.min
	OpcodeF64Max            = 0xA5 // f64.max
	OpcodeF64CopySign       = 0xA6 // f64.copysign
	OpcodeI32WrapI64        = 0xA7 // i32.wrap_i64
	OpcodeI32TruncF32S      = 0xA8 // i32.trunc_f32_s
	OpcodeI32TruncF32U      = 0xA9 // i32.trunc_f32_u
	OpcodeI32TruncF64S      = 0xAA // i32.trunc_f64_s
	OpcodeI32TruncF64U      = 0xAB // i32.trunc_f64_u
	OpcodeI64ExtendI32S     = 0xAC // i64.extend_i32_s
	OpcodeI64ExtendI32U     = 0xAD // i64.extend_i32_u
	OpcodeI64TruncF32S      = 0xAE // i64.trunc_f32_s
	OpcodeI64TruncF32U      = 0xAF // i64.trunc_f32_u
	OpcodeI64TruncF64S      = 0xB0 // i64.trunc_f64_s
	OpcodeI64TruncF64U      = 0xB1 // i64.trunc_f64_u
	OpcodeF32ConvertI32S    = 0xB2 // f32.convert_i32_s
	OpcodeF32ConvertI32U    = 0xB3 // f32.convert_i32_u
	OpcodeF32ConvertI64S    = 0xB4 // f32.convert_i64_s
	OpcodeF32ConvertI64U    = 0xB5 // f32.convert_i64_u
	OpcodeF32DemoteF64      = 0xB6 // f32.demote_f64
	OpcodeF64ConvertI32S    = 0xB7 // f64.convert_i32_s
	OpcodeF64ConvertI32U    = 0xB8 // f64.convert_i32_u
	OpcodeF64ConvertI64S    = 0xB9 // f64.convert_i64_s
	OpcodeF64ConvertI64U    = 0xBA // f64.convert_i64_u
	OpcodeF64PromoteF32     = 0xBB // f64.promote_f32
	OpcodeI32ReinterpretF32 = 0xBC // i32.reinterpret_f32
	OpcodeI64ReinterpretF64 = 0xBD // i64.reinterpret_f64
	OpcodeF32ReinterpretI32 = 0xBE // f32.reinterpret_i32
	OpcodeF64ReinterpretI64 = 0xBF // f64.reinterpret_i64
	OpcodeI32Extend8S       = 0xC0 // i32.extend8_s
	OpcodeI32Extend16S      = 0xC1 // i32.extend16_s
	OpcodeI64Extend8S       = 0xC2 // i64.extend8_s
	OpcodeI64Extend16S      = 0xC3 // i64.extend16_s
	OpcodeI64Extend32S      = 0xC4 // i64.extend32_s
	OpcodeTruncSat          = 0xFC // <i32|64>.trunc_sat_<f32|64>_<s|u>
)
