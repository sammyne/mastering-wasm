package vm

import "github.com/sammyne/mastering-wasm/mini-wasmer/types"

type RunInstructionFunc = func(vm *VM, args interface{}) error

var instructionTable [256]RunInstructionFunc

func init() {
	instructionTable[types.OpcodeUnreachable] = Unreachable
	instructionTable[types.OpcodeNop] = Nop
	instructionTable[types.OpcodeBlock] = Block
	instructionTable[types.OpcodeLoop] = Loop
	instructionTable[types.OpcodeIf] = BlockIf
	instructionTable[types.OpcodeBr] = Break
	instructionTable[types.OpcodeBrIf] = BreakIf
	instructionTable[types.OpcodeBrTable] = BreakTable
	instructionTable[types.OpcodeReturn] = Return
	instructionTable[types.OpcodeLocalGet] = LocalGet
	instructionTable[types.OpcodeLocalSet] = LocalSet
	instructionTable[types.OpcodeLocalTee] = LocalTee
	instructionTable[types.OpcodeGlobalGet] = GlobalGet
	instructionTable[types.OpcodeGlobalSet] = GlobalSet
	instructionTable[types.OpcodeI32Load] = I32Load
	instructionTable[types.OpcodeI64Load] = I64Load
	instructionTable[types.OpcodeF32Load] = F32Load
	instructionTable[types.OpcodeF64Load] = F64Load
	instructionTable[types.OpcodeI32Load8S] = I32Load8S
	instructionTable[types.OpcodeI32Load8U] = I32Load8U
	instructionTable[types.OpcodeI32Load16S] = I32Load16S
	instructionTable[types.OpcodeI32Load16U] = I32Load16U
	instructionTable[types.OpcodeI64Load8S] = I64Load8S
	instructionTable[types.OpcodeI64Load8U] = I64Load8U
	instructionTable[types.OpcodeI64Load16S] = I64Load16S
	instructionTable[types.OpcodeI64Load16U] = I64Load16U
	instructionTable[types.OpcodeI64Load32S] = I64Load32S
	instructionTable[types.OpcodeI64Load32U] = I64Load32U
	instructionTable[types.OpcodeI32Store] = I32Store
	instructionTable[types.OpcodeI64Store] = I64Store
	instructionTable[types.OpcodeF32Store] = F32Store
	instructionTable[types.OpcodeF64Store] = F64Store
	instructionTable[types.OpcodeI32Store8] = I32Store8
	instructionTable[types.OpcodeI32Store16] = I32Store16
	instructionTable[types.OpcodeI64Store8] = I64Store8
	instructionTable[types.OpcodeI64Store16] = I64Store16
	instructionTable[types.OpcodeI64Store32] = I64Store32
	instructionTable[types.OpcodeMemorySize] = MemorySize
	instructionTable[types.OpcodeMemoryGrow] = MemoryGrow

	// @TODO: sort
	instructionTable[types.OpcodeCall] = Call // hack!
	instructionTable[types.OpcodeDrop] = Drop
	instructionTable[types.OpcodeSelect] = Select
	instructionTable[types.OpcodeI32Const] = I32Const
	instructionTable[types.OpcodeI64Const] = I64Const
	instructionTable[types.OpcodeF32Const] = F32Const
	instructionTable[types.OpcodeF64Const] = F64Const
	instructionTable[types.OpcodeI32Eqz] = I32Eqz
	instructionTable[types.OpcodeI32Eq] = I32Eq
	instructionTable[types.OpcodeI32Ne] = I32Ne
	instructionTable[types.OpcodeI32LtS] = I32LtS
	instructionTable[types.OpcodeI32LtU] = I32LtU
	instructionTable[types.OpcodeI32GtS] = I32GtS
	instructionTable[types.OpcodeI32GtU] = I32GtU
	instructionTable[types.OpcodeI32LeS] = I32LeS
	instructionTable[types.OpcodeI32LeU] = I32LeU
	instructionTable[types.OpcodeI32GeS] = I32GeS
	instructionTable[types.OpcodeI32GeU] = I32GeU
	instructionTable[types.OpcodeI64Eqz] = I64Eqz
	instructionTable[types.OpcodeI64Eq] = I64Eq
	instructionTable[types.OpcodeI64Ne] = I64Ne
	instructionTable[types.OpcodeI64LtS] = I64LtS
	instructionTable[types.OpcodeI64LtU] = I64LtU
	instructionTable[types.OpcodeI64GtS] = I64GtS
	instructionTable[types.OpcodeI64GtU] = I64GtU
	instructionTable[types.OpcodeI64LeS] = I64LeS
	instructionTable[types.OpcodeI64LeU] = I64LeU
	instructionTable[types.OpcodeI64GeS] = I64GeS
	instructionTable[types.OpcodeI64GeU] = I64GeU
	instructionTable[types.OpcodeF32Eq] = F32Eq
	instructionTable[types.OpcodeF32Ne] = F32Ne
	instructionTable[types.OpcodeF32Lt] = F32Lt
	instructionTable[types.OpcodeF32Gt] = F32Gt
	instructionTable[types.OpcodeF32Le] = F32Le
	instructionTable[types.OpcodeF32Ge] = F32Ge
	instructionTable[types.OpcodeF64Eq] = F64Eq
	instructionTable[types.OpcodeF64Ne] = F64Ne
	instructionTable[types.OpcodeF64Lt] = F64Lt
	instructionTable[types.OpcodeF64Gt] = F64Gt
	instructionTable[types.OpcodeF64Le] = F64Le
	instructionTable[types.OpcodeF64Ge] = F64Ge
	instructionTable[types.OpcodeI32Clz] = I32Clz
	instructionTable[types.OpcodeI32Ctz] = I32Ctz
	instructionTable[types.OpcodeI32PopCnt] = I32PopCnt
	instructionTable[types.OpcodeI32Add] = I32Add
	instructionTable[types.OpcodeI32Sub] = I32Sub
	instructionTable[types.OpcodeI32Mul] = I32Mul
	instructionTable[types.OpcodeI32DivS] = I32DivS
	instructionTable[types.OpcodeI32DivU] = I32DivU
	instructionTable[types.OpcodeI32RemS] = I32RemS
	instructionTable[types.OpcodeI32RemU] = I32RemU
	instructionTable[types.OpcodeI32And] = I32And
	instructionTable[types.OpcodeI32Or] = I32Or
	instructionTable[types.OpcodeI32Xor] = I32Xor
	instructionTable[types.OpcodeI32Shl] = I32Shl
	instructionTable[types.OpcodeI32ShrS] = I32ShrS
	instructionTable[types.OpcodeI32ShrU] = I32ShrU
	instructionTable[types.OpcodeI32Rotl] = I32Rotl
	instructionTable[types.OpcodeI32Rotr] = I32Rotr
	instructionTable[types.OpcodeI64Clz] = I64Clz
	instructionTable[types.OpcodeI64Ctz] = I64Ctz
	instructionTable[types.OpcodeI64PopCnt] = I64PopCnt
	instructionTable[types.OpcodeI64Add] = I64Add
	instructionTable[types.OpcodeI64Sub] = I64Sub
	instructionTable[types.OpcodeI64Mul] = I64Mul
	instructionTable[types.OpcodeI64DivS] = I64DivS
	instructionTable[types.OpcodeI64DivU] = I64DivU
	instructionTable[types.OpcodeI64RemS] = I64RemS
	instructionTable[types.OpcodeI64RemU] = I64RemU
	instructionTable[types.OpcodeI64And] = I64And
	instructionTable[types.OpcodeI64Or] = I64Or
	instructionTable[types.OpcodeI64Xor] = I64Xor
	instructionTable[types.OpcodeI64Shl] = I64Shl
	instructionTable[types.OpcodeI64ShrS] = I64ShrS
	instructionTable[types.OpcodeI64ShrU] = I64ShrU
	instructionTable[types.OpcodeI64Rotl] = I64Rotl
	instructionTable[types.OpcodeI64Rotr] = I64Rotr
	instructionTable[types.OpcodeF32Abs] = F32Abs
	instructionTable[types.OpcodeF32Neg] = F32Neg
	instructionTable[types.OpcodeF32Ceil] = F32Ceil
	instructionTable[types.OpcodeF32Floor] = F32Floor
	instructionTable[types.OpcodeF32Trunc] = F32Trunc
	instructionTable[types.OpcodeF32Nearest] = F32Nearest
	instructionTable[types.OpcodeF32Sqrt] = F32Sqrt
	instructionTable[types.OpcodeF32Add] = F32Add
	instructionTable[types.OpcodeF32Sub] = F32Sub
	instructionTable[types.OpcodeF32Mul] = F32Mul
	instructionTable[types.OpcodeF32Div] = F32Div
	instructionTable[types.OpcodeF32Min] = F32Min
	instructionTable[types.OpcodeF32Max] = F32Max
	instructionTable[types.OpcodeF32CopySign] = F32CopySign
	instructionTable[types.OpcodeF64Abs] = F64Abs
	instructionTable[types.OpcodeF64Neg] = F64Neg
	instructionTable[types.OpcodeF64Ceil] = F64Ceil
	instructionTable[types.OpcodeF64Floor] = F64Floor
	instructionTable[types.OpcodeF64Trunc] = F64Trunc
	instructionTable[types.OpcodeF64Nearest] = F64Nearest
	instructionTable[types.OpcodeF64Sqrt] = F64Sqrt
	instructionTable[types.OpcodeF64Add] = F64Add
	instructionTable[types.OpcodeF64Sub] = F64Sub
	instructionTable[types.OpcodeF64Mul] = F64Mul
	instructionTable[types.OpcodeF64Div] = F64Div
	instructionTable[types.OpcodeF64Min] = F64Min
	instructionTable[types.OpcodeF64Max] = F64Max
	instructionTable[types.OpcodeF64CopySign] = F64CopySign
	instructionTable[types.OpcodeI32WrapI64] = I32WrapI64
	instructionTable[types.OpcodeI32TruncF32S] = I32TruncF32S
	instructionTable[types.OpcodeI32TruncF32U] = I32TruncF32U
	instructionTable[types.OpcodeI32TruncF64S] = I32TruncF64S
	instructionTable[types.OpcodeI32TruncF64U] = I32TruncF64U
	instructionTable[types.OpcodeI64ExtendI32S] = I64ExtendI32S
	instructionTable[types.OpcodeI64ExtendI32U] = I64ExtendI32U
	instructionTable[types.OpcodeI64TruncF32S] = I64TruncF32S
	instructionTable[types.OpcodeI64TruncF32U] = I64TruncF32U
	instructionTable[types.OpcodeI64TruncF64S] = I64TruncF64S
	instructionTable[types.OpcodeI64TruncF64U] = I64TruncF64U
	instructionTable[types.OpcodeF32ConvertI32S] = F32ConvertI32S
	instructionTable[types.OpcodeF32ConvertI32U] = F32ConvertI32U
	instructionTable[types.OpcodeF32ConvertI64S] = F32ConvertI64S
	instructionTable[types.OpcodeF32ConvertI64U] = F32ConvertI64U
	instructionTable[types.OpcodeF32DemoteF64] = F32DemoteF64
	instructionTable[types.OpcodeF64ConvertI32S] = F64ConvertI32S
	instructionTable[types.OpcodeF64ConvertI32U] = F64ConvertI32U
	instructionTable[types.OpcodeF64ConvertI64S] = F64ConvertI64S
	instructionTable[types.OpcodeF64ConvertI64U] = F64ConvertI64U
	instructionTable[types.OpcodeF64PromoteF32] = F64PromoteF32
	instructionTable[types.OpcodeI32ReinterpretF32] = Nop
	instructionTable[types.OpcodeI64ReinterpretF64] = Nop
	instructionTable[types.OpcodeF32ReinterpretI32] = Nop
	instructionTable[types.OpcodeF64ReinterpretI64] = Nop
	instructionTable[types.OpcodeI32Extend8S] = I32Extend8S
	instructionTable[types.OpcodeI32Extend16S] = I32Extend16S
	instructionTable[types.OpcodeI64Extend8S] = I64Extend8S
	instructionTable[types.OpcodeI64Extend16S] = I64Extend16S
	instructionTable[types.OpcodeI64Extend32S] = I64Extend32S
	instructionTable[types.OpcodeTruncSat] = TruncSat
}
